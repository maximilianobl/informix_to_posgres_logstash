input {
  
  ################################################################################################
  ###################################### DEMO: EMPLEADOS #########################################
  ################################################################################################

  # EMPLEADOS
  jdbc {
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/ifxjdbc-4.50.3.jar"
        jdbc_driver_class => "com.informix.jdbc.IfxDriver"
        jdbc_connection_string => "jdbc:informix-sqli://${IFX_HOST}:9088/testdb:informixserver=informix"
        jdbc_user => "informix"
        jdbc_password => "in4mix"
        schedule => "*/1 * * * *"
        statement => "SELECT 
                          MAX(id_nvd_empleados) as id_nvd_empleados,
                          nvd_cod,
                          nvd_tipo,
                          'empleados_posgres' as entidad,
                          nvd.id,
                          MAX(last_modified) as last_modified,
                          estado_ws,
                          nombre,
                          apellido,
                          fechanacimiento,
                          update_ts
                      FROM nvd_empleados nvd
                      LEFT JOIN empleados e ON e.id = nvd.id
                      WHERE nvd.estado_ws = 0 AND nvd.nvd_cod = 'emp'
                      GROUP BY nvd_cod, nvd_tipo, nvd.id, estado_ws, nombre, apellido, fechanacimiento, update_ts
                      ORDER BY id_nvd_empleados, nvd.id ASC
                      "                  
        tags => "tgs_emp_001"
        type => "type_emp_001"
  }
  
}

filter { 
    if "type_emp_001" in [type] {  
      mutate { 
        add_field => { "[@metadata][miTags]" => "%{tags}" }
        add_field => { "[@metadata][miType]" => "%{type}" }  
      }
      
      # Quito los espacio del inicio y del final
      mutate {
            strip => ["id","nombre","apellido", "nvd_cod"]
      }  
    }   
    
    
    # Valido el tipo de acciÃ³n
    if "tgs_emp_001" in [@metadata][miTags] { 
    
        # Obtengo la accion a realizar (Insertar, actualizar o borrar documento)
        if [accion] == "D" {
            mutate {  add_field => {"[accion_temp]" => "delete"}}
        } else if [accion] == "U" {
            mutate {  add_field => {"[accion_temp]" => "update"} }
        } else {
            mutate {  add_field => {"[accion_temp]" => "index"} }
        }
  

        mutate { 

            # Eventos
            rename => [ "type", "[@metadata][miType]" ] 
            rename => [ "entidad", "[@metadata][miEntidad]" ] 
            rename => [ "estado_ws", "[@metadata][miEstado]" ]                  
            rename => [ "[accion_temp]", "[@metadata][accion_temp]" ]
            rename => [ "tags", "[@metadata][tags_temp]" ]
        }   

        # Casteo los datos segun sea necesario
        # mutate {
        #   # convert => {'xxx' => 'float'} 
        #   convert => {'id' => 'integer'} 
        #   id => "convert-field-worker-log"
        # }     

    
    } # FIN   


    

    # Elimino los field temporales genarales.
    mutate {
      remove_field => [ "@version", "@timestamp", "tags", "type", "entidad", "estado_ws", "accion", "last_modified"] 
    }

} 

output {
  #stdout {codec => rubydebug { metadata => true } } 
  stdout {codec => json } 

  if "type_emp_001" in [@metadata][miType] {
    if "tgs_emp_001" in [@metadata][tags_temp] {    
        
        # Inserto , no hace falta validar si es I, U o D pero lo dejo a modo de ejemplo
        if "index" in [@metadata][accion_temp] {
            jdbc {
              driver_class => "org.postgresql.Driver"
              driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.4.1.jar"
              # https://stackoverflow.com/questions/37482716/using-docker-to-launch-web-app-cant-connect-to-postgresql-db
              connection_string => 'jdbc:postgresql://${PSG_URL}/postgres?user=postgres&password=postgres'       

              # statement => ["INSERT INTO public.empleados(id, nombre, apellido, fechanacimiento, update_ts)	VALUES(?::integer,?,?,?::date,?::date) ","%{id}", "%{nombre}", "%{apellido}", "%{fechanacimiento}", "%{update_ts}"]      

              #statement => [ "SELECT * FROM public.ifx_to_posgres_json(?::json)", "message_json" ]  

              #statement => [ "SELECT * FROM public.ifx_to_posg_empleados(?::integer,?,?,?::date,?::date,?,?)","%{id}", "%{nombre}", "%{apellido}", "%{fechanacimiento}", "%{update_ts}", "%{nvd_cod}", "%{nvd_tipo}"]

              statement => [ "SELECT * FROM public.ifx_to_posg_empleados(?::integer,?,?,?,?,?,?)","%{id}", "%{nombre}", "%{apellido}", "%{fechanacimiento}", "%{update_ts}", "%{nvd_cod}", "%{nvd_tipo}"]
            }
        }

        ## Borro
        # if "delete" in [@metadata][accion_temp] {
        # ///
        # }

        # Actualizo el estado a procesado en la DB
        jdbc {
              driver_class => "com.informix.jdbc.IfxDriver"
              driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/ifxjdbc-4.50.3.jar"
              connection_string => "jdbc:informix-sqli://${IFX_HOST}:9088/testdb:informixserver=informix;user=informix;password=in4mix;IFX_LOCK_MODE_WAIT=20"
              statement => ["UPDATE nvd_empleados SET estado_ws = 1 WHERE id = ? AND estado_ws = 0 AND id_nvd_empleados <= ? AND nvd_tipo = ? ","%{id}","%{id_nvd_empleados}", "%{nvd_tipo}"]         
        }
        
    } 
    
  }     
}
